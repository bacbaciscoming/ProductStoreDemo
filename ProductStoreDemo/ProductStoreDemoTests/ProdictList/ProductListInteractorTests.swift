//
//  ProductListInteractorTests.swift
//  ProductStoreDemo
//
//  Created by Pit on 15/6/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import ProductStoreDemo
import XCTest

class ProductListInteractorTests: XCTestCase{
    // MARK: Subject under test
    
    var sut: ProductListInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp(){
        super.setUp()
        setupProductListInteractor()
    }
    
    override func tearDown(){
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupProductListInteractor(){
        sut = ProductListInteractor()
    }
    
    // MARK: Test doubles
    
    class ProductListPresentationLogicSpy: ProductListPresentationLogic{
        
        var presentProductListCalled: Bool = false
        func presentProductList(response: ProductList.List.Response) {
            presentProductListCalled = true
        }
        
        var presentProductDetailCalled: Bool = false
        func presentProductDetail() {
            presentProductDetailCalled = true
        }
        
        var presentProductListFailureCalled: Bool = false
        func handleProductListFailure(error: ProductList.List.Error) {
            presentProductListFailureCalled = true
        }
    }
    
    class ProductListWorkerSpy: ProductListWorker{
        
        var getProductListCalled: Bool = false
        override func getProductList(completion: @escaping([ProductModel]) -> Void,
                                     failure: @escaping (String) -> Void){
            getProductListCalled = true
            completion(ProductTest.productList)
        }
    }
    
    // MARK: Tests
    
    func testShouldAskWorkerToGetProductListAndPresenterToFormat(){
        
        // Given
        let presenterSpy = ProductListPresentationLogicSpy()
        sut.presenter = presenterSpy
        let workerSpy = ProductListWorkerSpy()
        sut.worker = workerSpy
        
        let request = ProductList.List.Request()
        
        // When
        sut.getProductList(request: request)
        
        // Then
        XCTAssertTrue(workerSpy.getProductListCalled, "getProductList(request:) should ask the worker to get product list")
        XCTAssertTrue(presenterSpy.presentProductListCalled, "getProductList(request:) should ask the presenter to format the result")
    }
    
    func testSholdSelectCurrentProduct(){
        
        // Given
        let presenterSpy = ProductListPresentationLogicSpy()
        sut.presenter = presenterSpy
        sut.productList = ProductTest.productList
        
        // When
        sut.selectCurrentProduct(index: 0)
        
        // Then
        XCTAssertTrue(presenterSpy.presentProductDetailCalled, "getProductList(request:) should ask the presenter to format the result")
    }
}
