//
//  ProductListViewControllerTests.swift
//  ProductStoreDemo
//
//  Created by Pit on 15/6/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import ProductStoreDemo
import XCTest

struct TestDisplayProductListFailure{
    static var presentViewControllerAnimatedCompletionCalled = false
    static var viewControllerToPresent: UIViewController?
}

extension ProductListViewController{
    
    override open func showDetailViewController(_ vc: UIViewController, sender: Any?){
        TestDisplayProductListFailure.presentViewControllerAnimatedCompletionCalled = true
        TestDisplayProductListFailure.viewControllerToPresent = vc
    }
}

class ProductListViewControllerTests: XCTestCase{
    
    // MARK: Subject under test
    
    var sut: ProductListViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp(){
        
        super.setUp()
        window = UIWindow()
        setupProductListViewController()
    }
    
    override func tearDown(){
        
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupProductListViewController(){
        
        let storyboard = UIStoryboard(name: "Main", bundle: Bundle(for: self.classForCoder))
        sut = storyboard.instantiateViewController(withIdentifier: "ProductListViewController") as? ProductListViewController
    }
    
    func loadView(){
        
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    class ProductListBusinessLogicSpy: ProductListBusinessLogic{
        
        var productList: [ProductModel] = []
        
        var getProductListCalled: Bool = false
        var getProductListCalledCount: Int = 0
        func getProductList(request: ProductList.List.Request) {
            getProductListCalled = true
            getProductListCalledCount += 1
        }
        
        
        var selectCurrentProductCalled: Bool = false
        func selectCurrentProduct(index: Int) {
            selectCurrentProductCalled = true
        }
    }
    
    class ProductListRouterSpy: ProductListRouter{
        
        var routeToProductDetailCalled = false
        
        override func routeToProductDetail(segue: UIStoryboardSegue?){
            routeToProductDetailCalled = true
        }
    }

    // MARK: Tests
    
    func testGetProductListWhenViewIsLoaded(){
        
        // Given
        let spy = ProductListBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(spy.getProductListCalled, "viewDidLoad() should ask the interactor to get product list")
    }
    
    func testNumberOfItemsInSectionShouldEqaulNumberOfProductsToDisplay(){
        
        // Given
        let productList = [ProductList.List.ViewModel.Product(title: "Title",
                                                              image: "https://firebasestorage.googleapis.com/v0/b/productstoredemo.appspot.com/o/poke.jpeg?alt=media&token=6c487be9-065b-4985-94c2-729e21a8426",
                                                              isNewProduct: true,
                                                              price: 4.0)]
        sut.productList = productList
        
        // When
        loadView()
        let collectionView = sut.collectionView
        let numberOfItems = collectionView?.numberOfItems(inSection: 0)
        
        // Then
        XCTAssertEqual(numberOfItems, productList.count, "The number of collction view items should equal the number of products to display")
    }
    
    func testShouldConfigureCollectionViewCellToDisplayProduct(){
        
        // Given
        let productList = [ProductList.List.ViewModel.Product(title: "Title",
                                                              image: "https://firebasestorage.googleapis.com/v0/b/productstoredemo.appspot.com/o/poke.jpeg?alt=media&token=6c487be9-065b-4985-94c2-729e21a8426",
                                                              isNewProduct: true,
                                                              price: 4.0)]
        sut.productList = productList
        loadView()
        let collectionView = sut.collectionView
        let indexPath = IndexPath(item: 0, section: 0)
        
        // When
        let cell = sut.collectionView.dataSource?.collectionView(collectionView!, cellForItemAt: indexPath) as? ProductCollectionViewCell
        
        // Then
        XCTAssertEqual(cell?.titleLabel?.text, "Title", "A properly configured collection view cell should display the product title")
        XCTAssertEqual(cell?.priceLabel?.text, "4.00", "A properly configured collection view cell should display the product price")
        XCTAssertTrue(cell?.newLabel?.isHidden != true, "A properly configured collection view cell should display the product new label")
        XCTAssertNotNil(cell?.imageView, "A properly configured collection view cell should display the product image")
    }
    
    func testShouldSelectCurrentProductAnd(){
        
        // Given
        let interactorSpy = ProductListBusinessLogicSpy()
        interactorSpy.productList = [ProductTest.product1]
        sut.interactor = interactorSpy
        
        loadView()
        let collectionView = sut.collectionView
        let indexPath = IndexPath(item: 0, section: 0)
        
        // When
        DispatchQueue.main.async {
            self.sut.collectionView.delegate?.collectionView?(collectionView!, didSelectItemAt: indexPath)
            
            // Then
            XCTAssertTrue(interactorSpy.selectCurrentProductCalled, "CollectionView didSelectItem should ask the interactor to selectCurrentProduct")
        }
    }
    
    func testShouldRouteToProductDetail(){
        
        // Given
        
        let routerSpy = ProductListRouterSpy()
        sut.router = routerSpy
        
        loadView()
        
        // When
        
        sut.displayProductDetail()
        
        //Then
        
        XCTAssertTrue(routerSpy.routeToProductDetailCalled, "displayProductDetail should ask the router to route")
    }
    
    func testGetProductListFailureShouldShowAnAlert(){
        
        // Given
        loadView()
        
        // When
        let error = ProductList.List.Error(errorDescription: "Error Description")
        sut.showAlertFailure(error: error)
        
        // Then
        DispatchQueue.main.async {
            let alertController = TestDisplayProductListFailure.viewControllerToPresent as! UIAlertController
            XCTAssert(TestDisplayProductListFailure.presentViewControllerAnimatedCompletionCalled, "Displaying get product list failure should show an alert")
            XCTAssertEqual(alertController.message, "Error Description")
        }
    }
    
    func testRetryGetProductList(){
        
        // Given
        let spy = ProductListBusinessLogicSpy()
        sut.interactor = spy
        
        loadView()
        
        // When
        sut.actionRetry(self)
        
        // Then
        XCTAssertTrue(spy.getProductListCalledCount > 1, "actionRetry should ask the interactor to getProductList again")
    }
}
